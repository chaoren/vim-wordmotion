*wordmotion.txt* More useful word motions for Vim

INTRODUCTION					*wordmotion*

This is one word under Vim's definition:
>
	CamelCaseACRONYMWords_underscore1234
	^
<
With this plugin, this becomes six words:
>
	CamelCaseACRONYMWords_underscore1234
	^    ^   ^      ^     ^         ^
<
WORDS						*wordmotion-words*

A `word` is any of the following:

- An uppercase letter followed by one or more lowercase letters
- One or more uppercase letters that does not immediately precede
  a lowercase letter
- One or more uppercase letters
- One or more lowercase letters
- A valid hexadecimal literal
- A valid octal literal
- A valid binary literal
- One or more numeric digits
- One or more of other characters
- An empty line

A `WORD` is any sequence of non-space characters separated by spaces.

MAPPINGS					*wordmotion-mappings*

						*wordmotion-w*
{prefix}w		[count] `word`s forward. |exclusive| motion.

						*wordmotion-e*
{prefix}e		Forward to the end of `word` [count] |inclusive|.
			Does not stop in an empty line.

						*wordmotion-b*
{prefix}b		[count] `word`s backward. |exclusive| motion.

						*wordmotion-ge*
{prefix}ge		Backward to the end of `word` [count] |inclusive|.

						*wordmotion-aw*
a{prefix}w		"a `word`", select [count] `word`s (see |wordmotion-word|).
			Leading or trailing white space is included, but not
			counted.
			When used in Visual linewise mode "aw" switches to
			Visual characterwise mode.

						*wordmotion-iw*
i{prefix}w		"inner `word`", select [count] `word`s
			(see |wordmotion-word|).
			White space between `word`s is counted too.
			When used in Visual linewise mode "iw" switches to
			Visual characterwise mode.

						*wordmotion-c_<C-R>_<C-W>*
CTRL-R CTRL-W		Insert the `word` under the cursor
			(see |wordmotion-word|).

						*wordmotion-W*
{prefix}W		[count] `WORD`s forward. |exclusive| motion.

						*wordmotion-E*
{prefix}E		Forward to the end of `WORD` [count] |inclusive|.
			Does not stop in an empty line.

						*wordmotion-B*
{prefix}B		[count] `WORD`s backward. |exclusive| motion.

						*wordmotion-gE*
{prefix}gE		Backward to the end of `WORD` [count] |inclusive|.

						*wordmotion-aW*
a{prefix}W		"a `WORD`", select [count] `WORD`s (see |wordmotion-word|).
			Leading or trailing white space is included, but not
			counted.
			When used in Visual linewise mode "aW" switches to
			Visual characterwise mode.

						*wordmotion-iW*
i{prefix}W		"inner `WORD`", select [count] `WORD`s
			(see |wordmotion-word|).
			White space between `WORD`s is counted too.
			When used in Visual linewise mode "iW" switches to
			Visual characterwise mode.

						*wordmotion-c_<C-R>_<C-A>*
<C-R><C-A>		Insert the `WORD` under the cursor
			(see |wordmotion-word|).

CUSTOMIZATION					*wordmotion-customization*

Default `word` mappings are `w`, `b`, `e`, `ge`, `aw`, `iw`, and `<C-R><C-W>`.

Default `WORD` mappings are `W`, `B`, `E`, `gE`, `aW`, `iW`, and `<C-R><C-A>`.

						*g:wordmotion_prefix*
Use |g:wordmotion_prefix| to apply a common prefix to each of the default word
motion mappings.
E.g.,
>
	let g:wordmotion_prefix = '<Leader>'
<
NOTE: does not apply to the command line mode `<C-R><C-W>` and `<C-R><C-A>`
mappings.

						*g:wordmotion_mappings*
Use |g:wordmotion_mappings| to individually replace the default word motion
mappings.
E.g.,
>
	let g:wordmotion_mappings = {
	\ 'w' : '<M-w>',
	\ 'b' : '<M-b>',
	\ 'e' : '<M-e>',
	\ 'ge' : 'g<M-e>',
	\ 'aw' : 'a<M-w>',
	\ 'iw' : 'i<M-w>',
	\ '<C-R><C-W>' : '<C-R><M-w>'
	\ }
<
Unspecified entries will still use the default mappings.
Set the value to an empty string to disable the mapping.

NOTE: this overrides |g:wordmotion_prefix|.

						*g:wordmotion_spaces*
Use |g:wordmotion_spaces| (default '_') to designate extra space characters.
E.g.,
>
	let g:wordmotion_spaces = '_-.'
<
will produce the following result:
>
	foo_bar-baz.qux
	^   ^   ^   ^
<
						*wordmotion-reload*
All options can be applied dynamically by reloading the plugin.
E.g., to disable the `w` mapping:
>
	let g:wordmotion_mappings['w'] = ''
	unlet g:loaded_wordmotion
	runtime plugin/wordmotion.vim
<
then later re-enable it
>
	let g:wordmotion_mappings['w'] = '<M-w>'
	unlet g:loaded_wordmotion
	runtime plugin/wordmotion.vim
<
CAVEATS						*wordmotion-caveats*

There are some special cases with how Vim's word motions work.
E.g.,

Vim:
>
	^foo [b]ar$ -> dw -> ^foo[ ]$
	^ baz$               ^ baz$

	^[f]oo bar$ -> cw -> ^[ ]bar$

This plugin:
>
	^foo [b]ar$ -> dw -> ^foo [b]az$
	^ baz$

	^[f]oo bar$ -> cw -> ^[b]ar$
<
This plugin faithfully follows the motion of `w` when executing `dw` and `cw`,
while Vim replaces these two special cases with the behavior of `de` and `ce`,
respectively.

If you want to restore Vim's special case behavior with `dw` and `cw`, you can
do this:
>
	nmap dw de
	nmap cw ce
	nmap dW dE
	nmap cW cE
<

 vim:tw=78:ts=8:ft=help:norl:
