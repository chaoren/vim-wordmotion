# regular words

Given (This is some text):
  This is some text

# first word of line, start of word

Do (dw at [T]his):
  dw

Then (Assert that cursor is at [i]s):
  Assert 1, col('.')

Expect (This deleted):
  is some text

# first word of line, middle of word

Do (dw at T[h]is):
  l
  dw

Then (Assert that cursor is at [i]s):
  Assert 2, col('.')

Expect (his deleted):
  Tis some text

# first word of line, end of word

Do (dw at Thi[s]):
  e
  dw

Then (Assert that cursor is at [i]s):
  Assert 5, col('.')

Expect (his deleted):
  Thiis some text

# middle of line, start of word

Do (dw at [s]ome):
  2w
  dw

Then (Assert that cursor is at [t]ext):
  Assert 9, col('.')

Expect (some deleted):
  This is text

# middle of line, middle of word

Do (dw at s[o]me):
  2wl
  dw

Then (Assert that cursor is at [t]ext):
  Assert 10, col('.')

Expect (some deleted):
  This is stext

# middle of line, end of word

Do (dw at som[e]):
  3e
  dw

Then (Assert that cursor is at [t]ext):
  Assert 12, col('.')

Expect (some deleted):
  This is somtext

# end of line, start of word

Do (dw at [t]ext):
  3w
  dw

Then (Assert that cursor is at some[_]):
  Assert 13, col('.')

Expect (text deleted):
  This is some 

# end of line, middle of word

Do (dw at t[e]xt):
  3wl
  dw

Then (Assert that cursor is at _[t]):
  Assert 14, col('.')

Expect (text deleted):
  This is some t

# single character words

Given (a b c\nd e f):
  a b c
  d e f

Do (dw at [a]):
  dw

Then (Assert that cursor is at b):
  Assert 1, line('.')
  Assert 1, col('.')

Expect (a deleted):
  b c
  d e f

Do (dw at [b]):
  w
  dw

Then (Assert that cursor is at c):
  Assert 1, line('.')
  Assert 3, col('.')

Expect (b deleted):
  a c
  d e f

Do (dw at [c]):
  2w
  dw

Then (Assert that cursor is at b[ ]):
  Assert 1, line('.')
  Assert 4, col('.')

Expect (c deleted):
  a b 
  d e f

Do (dw at [d]):
  j
  dw

Then (Assert that cursor is at e):
  Assert 2, line('.')
  Assert 1, col('.')

Expect (d deleted):
  a b c
  e f

Do (dw at [e]):
  jw
  dw

Then (Assert that cursor is at f):
  Assert 2, line('.')
  Assert 3, col('.')

Expect (e deleted):
  a b c
  d f

Do (dw at [f]):
  j2w
  dw

Then (Assert that cursor is at e[ ]):
  Assert 2, line('.')
  Assert 4, col('.')

Expect (f deleted):
  a b c
  d e 

Do (d2w at [b]):
  w
  d2w

Then (Assert that cursor is at a[ ]):
  Assert 1, line('.')
  Assert 2, col('.')

Expect ("b c" deleted):
  a 
  d e f

Do (2dw at [b]):
  w
  2dw

Then (Assert that cursor is at a[ ]):
  Assert 1, line('.')
  Assert 2, col('.')

Expect ("b c" deleted):
  a 
  d e f

Do (d4w at [b]):
  w
  d4w

Then (Assert that cursor is at f):
  Assert 1, line('.')
  Assert 3, col('.')

Expect ("b c\nd e " deleted):
  a f

Do (4dw at [b]):
  w
  4dw

Then (Assert that cursor is at f):
  Assert 1, line('.')
  Assert 3, col('.')

Expect ("b c\nd e " deleted):
  a f

# leading space before current word

Given (Leading space, word, newline, word):
  	foo
  bar

Do (dw on word with leading space):
  w
  dw

Expect (Leading space left intact):
  	
  bar

Given (Leading space, word, space, word, newline, word):
  	foo bar
  baz

Do (d2w on word with leading space):
  w
  d2w

Expect (Leading space left intact):
  	
  baz

Given (Leading space, word, space, word, newline, word):
  	foo bar
  baz

Do (2dw on word with leading space):
  w
  2dw

Expect (Leading space left intact):
  	
  baz

Given (Leading space, word, newline, leading space, word, newline, word):
  	foo
  	bar
  baz

Do (2dw on word with leading space):
  w
  2dw

Expect (Leading space left intact):
  	
  baz

# leading space on next line

Given (Word, newline, leading space, word):
  foo
  	bar

Do (dw on word with leading space on the next line):
  dw

Expect (Leading space left intact):
  
  	bar

Given (Word, space, word, newline, leading space, word):
  foo bar
  	baz

Do (d2w on word with leading space on the next line):
  d2w

Expect (Newline and leading space left intact):
  
  	baz

Given (Word, space, word, newline, leading space, word):
  foo bar
  	baz

Do (2dw on word with leading space on the next line):
  2dw

Expect (Newline and leading space left intact):
  
  	baz

Given (Word, newline, leading space, word, newline, leading space, word):
  foo
  	bar
  	baz

Do (2dw on word with leading space on the next line):
  2dw

Expect (Newline and leading space left intact):
  
  	baz
