Execute (Check default mappings):
  let maps = [ 'iw', 'aw', 'iW', 'aW' ]
  for map in maps
    Assert hasmapto('AOrInnerWordMotion', 'x')
    execute 'xunmap' map
    Assert hasmapto('AOrInnerWordMotion', 'o')
    execute 'ounmap' map
  endfor
  Assert !hasmapto('AOrInnerWordMotion', 'xo')
  let maps = [ 'w', 'e', 'b', 'ge', 'W', 'E', 'B', 'gE' ]
  for map in maps
    Assert hasmapto('WordMotion', 'n')
    execute 'nunmap' map
    Assert hasmapto('WordMotion', 'x')
    execute 'xunmap' map
    Assert hasmapto('WordMotion', 'o')
    execute 'ounmap' map
  endfor
  Assert !hasmapto('WordMotion', 'nxo')
  let maps = [ '<C-R><C-W>', '<C-R><C-A>' ]
  for map in maps
    Assert hasmapto('GetCurrentWord', 'c')
    execute 'cunmap' map
  endfor
  Assert !hasmapto('GetCurrentWord', 'c')

Execute (Check mappings with prefix):
  let g:wordmotion_prefix = '<Leader>'
  unlet! g:wordmotion_mappings
  unlet! g:loaded_wordmotion
  runtime plugin/wordmotion.vim
  let maps = [ 'i<Leader>w', 'a<Leader>w', 'i<Leader>W', 'a<Leader>W' ]
  for map in maps
    Assert hasmapto('AOrInnerWordMotion', 'x')
    execute 'xunmap' map
    Assert hasmapto('AOrInnerWordMotion', 'o')
    execute 'ounmap' map
  endfor
  Assert !hasmapto('AOrInnerWordMotion', 'xo')
  let maps = [
  \ '<Leader>w', '<Leader>e', '<Leader>b', '<Leader>ge',
  \ '<Leader>W', '<Leader>E', '<Leader>B', '<Leader>gE',
  \ ]
  for map in maps
    Assert hasmapto('WordMotion', 'n')
    execute 'nunmap' map
    Assert hasmapto('WordMotion', 'x')
    execute 'xunmap' map
    Assert hasmapto('WordMotion', 'o')
    execute 'ounmap' map
  endfor
  Assert !hasmapto('WordMotion', 'nxo')
  let maps = [ '<C-R><C-W>', '<C-R><C-A>' ]
  for map in maps
    Assert hasmapto('GetCurrentWord', 'c')
    execute 'cunmap' map
  endfor
  Assert !hasmapto('GetCurrentWord', 'c')

Execute (Check custom mappings):
  unlet! g:wordmotion_prefix
  let g:wordmotion_mappings = {
  \ 'w' : '<M-w>',
  \ 'e' : '<M-e>',
  \ 'b' : '<M-b>',
  \ 'ge' : 'g<M-e>',
  \ 'iw' : 'i<M-w>',
  \ 'aw' : 'a<M-w>',
  \ '<C-R><C-W>' : '<C-R><M-w>',
  \ 'W' : '<M-W>',
  \ 'E' : '<M-E>',
  \ 'B' : '<M-B>',
  \ 'gE' : 'g<M-E>',
  \ 'iW' : 'i<M-W>',
  \ 'aW' : 'a<M-W>',
  \ '<C-R><C-A>' : '<C-R><M-a>',
  \ }
  unlet! g:loaded_wordmotion
  runtime plugin/wordmotion.vim
  let maps = [ 'i<M-w>', 'a<M-w>', 'i<M-W>', 'a<M-W>' ]
  for map in maps
    Assert hasmapto('AOrInnerWordMotion', 'x')
    execute 'xunmap' map
    Assert hasmapto('AOrInnerWordMotion', 'o')
    execute 'ounmap' map
  endfor
  Assert !hasmapto('AOrInnerWordMotion', 'xo')
  let maps = [
  \ '<M-w>', '<M-e>', '<M-b>', 'g<M-e>',
  \ '<M-W>', '<M-E>', '<M-B>', 'g<M-E>',
  \ ]
  for map in maps
    Assert hasmapto('WordMotion', 'n')
    execute 'nunmap' map
    Assert hasmapto('WordMotion', 'x')
    execute 'xunmap' map
    Assert hasmapto('WordMotion', 'o')
    execute 'ounmap' map
  endfor
  Assert !hasmapto('WordMotion', 'nxo')
  let maps = [ '<C-R><M-w>', '<C-R><M-a>' ]
  for map in maps
    Assert hasmapto('GetCurrentWord', 'c')
    execute 'cunmap' map
  endfor
  Assert !hasmapto('GetCurrentWord', 'c')

Execute (Check mixed custom mappings with prefix):
  let g:wordmotion_prefix = ','
  let g:wordmotion_mappings = {
  \ 'e' : '<Plug>WordmotionE',
  \ 'B' : '<Plug>WordmotionB',
  \ 'iw' : '<Plug>WordmotionIW',
  \ 'aW' : '<Plug>WordmotionAW',
  \ }
  unlet! g:loaded_wordmotion
  runtime plugin/wordmotion.vim
  let maps = [ '<Plug>WordmotionIW', 'a,w', 'i,W', '<Plug>WordmotionAW']
  for map in maps
    Assert hasmapto('AOrInnerWordMotion', 'x')
    execute 'xunmap' map
    Assert hasmapto('AOrInnerWordMotion', 'o')
    execute 'ounmap' map
  endfor
  Assert !hasmapto('AOrInnerWordMotion', 'xo')
  let maps = [
  \ ',w', '<Plug>WordmotionE', ',b', ',ge',
  \ ',W', ',E', '<Plug>WordmotionB', ',gE',
  \ ]
  for map in maps
    Assert hasmapto('WordMotion', 'n')
    execute 'nunmap' map
    Assert hasmapto('WordMotion', 'x')
    execute 'xunmap' map
    Assert hasmapto('WordMotion', 'o')
    execute 'ounmap' map
  endfor
  Assert !hasmapto('WordMotion', 'nxo')
  let maps = [ '<C-R><C-W>', '<C-R><C-A>' ]
  for map in maps
    Assert hasmapto('GetCurrentWord', 'c')
    execute 'cunmap' map
  endfor
  Assert !hasmapto('GetCurrentWord', 'c')

Execute (Check no mappings):
  unlet! g:wordmotion_prefix
  let g:wordmotion_mappings = {
  \ 'w' : '',
  \ 'e' : '',
  \ 'b' : '',
  \ 'ge' : '',
  \ 'iw' : '',
  \ 'aw' : '',
  \ '<C-R><C-W>' : '',
  \ 'W' : '',
  \ 'E' : '',
  \ 'B' : '',
  \ 'gE' : '',
  \ 'iW' : '',
  \ 'aW' : '',
  \ '<C-R><C-A>' : '',
  \ }
  unlet! g:loaded_wordmotion
  runtime plugin/wordmotion.vim
  Assert !hasmapto('WordMotion', 'nxo')
  Assert !hasmapto('GetCurrentWord', 'c')

Execute (Check no mappings even with prefix):
  let g:wordmotion_prefix = '<Leader>'
  let g:wordmotion_mappings = {
  \ 'w' : '',
  \ 'e' : '',
  \ 'b' : '',
  \ 'ge' : '',
  \ 'iw' : '',
  \ 'aw' : '',
  \ '<C-R><C-W>' : '',
  \ 'W' : '',
  \ 'E' : '',
  \ 'B' : '',
  \ 'gE' : '',
  \ 'iW' : '',
  \ 'aW' : '',
  \ '<C-R><C-A>' : '',
  \ }
  unlet! g:loaded_wordmotion
  runtime plugin/wordmotion.vim
  Assert !hasmapto('WordMotion', 'nxo')
  Assert !hasmapto('GetCurrentWord', 'c')

Execute (Reset plugin for further tests):
  unlet! g:wordmotion_prefix
  unlet! g:wordmotion_mappings
  unlet! g:loaded_wordmotion
  runtime plugin/wordmotion.vim
