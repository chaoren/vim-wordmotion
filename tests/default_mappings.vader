After (Restore default options):
  call wordmotion#_default()

Execute (Check default mappings):
  for map in [ 'iw', 'aw' ]
    for mode in [ 'x', 'o' ]
      AssertEqual '<Plug>WordMotion_' . map, maparg(map, mode)
      Assert maparg('<Plug>WordMotion_' . map, mode) =~ 'wordmotion#object('
      execute mode . 'unmap' map
      Assert !hasmapto('<Plug>WordMotion_' . map, mode)
      execute mode . 'unmap' '<Plug>WordMotion_' . map
    endfor
  endfor
  Assert !hasmapto('wordmotion#object(', 'nvxsoilc')
  for map in [ 'w', 'e', 'b', 'ge' ]
    for mode in [ 'n', 'x', 'o' ]
      AssertEqual '<Plug>WordMotion_' . map, maparg(map, mode)
      Assert maparg('<Plug>WordMotion_' . map, mode) =~ 'wordmotion#motion('
      execute mode . 'unmap' map
      Assert !hasmapto('<Plug>WordMotion_' . map, mode)
      execute mode . 'unmap' '<Plug>WordMotion_' . map
    endfor
  endfor
  Assert !hasmapto('wordmotion#motion(', 'nvxsoilc')
  for map in [ '<C-R><C-W>' ]
    AssertEqual '<Plug>WordMotion_' . map, maparg(map, 'c')
    Assert maparg('<Plug>WordMotion_'  . map, 'c') =~ 'wordmotion#current('
    execute 'cunmap' map
    Assert !hasmapto('<Plug>WordMotion_' . map, 'c')
    execute 'cunmap' '<Plug>WordMotion_' . map
  endfor
  Assert !hasmapto('wordmotion#current(', 'nvxsoilc')
  Assert !hasmapto('<Plug>WordMotion_', 'nvxsoilc')

Execute (Check default uppercase mappings):
  let g:wordmotion_uppercase_spaces = ['_']
  call wordmotion#reload()
  for map in [ 'iw', 'aw', 'iW', 'aW' ]
    for mode in [ 'x', 'o' ]
      AssertEqual '<Plug>WordMotion_' . map, maparg(map, mode)
      Assert maparg('<Plug>WordMotion_' . map, mode) =~ 'wordmotion#object('
      execute mode . 'unmap' map
      Assert !hasmapto('<Plug>WordMotion_' . map, mode)
      execute mode . 'unmap' '<Plug>WordMotion_' . map
    endfor
  endfor
  Assert !hasmapto('wordmotion#object(', 'nvxsoilc')
  for map in [ 'w', 'e', 'b', 'ge', 'W', 'E', 'B', 'gE' ]
    for mode in [ 'n', 'x', 'o' ]
      AssertEqual '<Plug>WordMotion_' . map, maparg(map, mode)
      Assert maparg('<Plug>WordMotion_' . map, mode) =~ 'wordmotion#motion('
      execute mode . 'unmap' map
      Assert !hasmapto('<Plug>WordMotion_' . map, mode)
      execute mode . 'unmap' '<Plug>WordMotion_' . map
    endfor
  endfor
  Assert !hasmapto('wordmotion#motion(', 'nvxsoilc')
  for map in [ '<C-R><C-W>', '<C-R><C-A>' ]
    AssertEqual '<Plug>WordMotion_' . map, maparg(map, 'c')
    Assert maparg('<Plug>WordMotion_'  . map, 'c') =~ 'wordmotion#current('
    execute 'cunmap' map
    Assert !hasmapto('<Plug>WordMotion_' . map, 'c')
    execute 'cunmap' '<Plug>WordMotion_' . map
  endfor
  Assert !hasmapto('wordmotion#current(', 'nvxsoilc')
  Assert !hasmapto('<Plug>WordMotion_', 'nvxsoilc')

Execute (Check disable default mappings):
  let g:wordmotion_nomap = 1
  let g:wordmotion_uppercase_spaces = ['_']
  call wordmotion#reload()
  for map in [ 'iw', 'aw', 'iW', 'aW' ]
    for mode in [ 'x', 'o' ]
      Assert empty(maparg(map, mode))
      Assert maparg('<Plug>WordMotion_' . map, mode) =~ 'wordmotion#object('
    endfor
  endfor
  for map in [ 'w', 'e', 'b', 'ge', 'W', 'E', 'B', 'gE' ]
    for mode in [ 'n', 'x', 'o' ]
      Assert empty(maparg(map, mode))
      Assert maparg('<Plug>WordMotion_' . map, mode) =~ 'wordmotion#motion('
    endfor
  endfor
  for map in [ '<C-R><C-W>', '<C-R><C-A>' ]
    Assert empty(maparg(map, 'c'))
    Assert maparg('<Plug>WordMotion_'  . map, 'c') =~ 'wordmotion#current('
  endfor
  Assert !hasmapto('<Plug>WordMotion_', 'nvxsoilc')
