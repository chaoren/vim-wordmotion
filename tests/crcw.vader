Given (Some text):
  This is some text

Do (s/<cword>/changed/ at [s]ome):
  2w:s/\<C-R>\<C-W>/changed/\<CR>

Expect (Changed text):
  This is changed text

Given (SomeText):
  This is someText

Do (s/<cword>/changed/ at [s]ome):
  2w:s/\<C-R>\<C-W>/changed/\<CR>

Expect (ChangedText):
  This is changedText

Do (s/<cWORD>/changed/ at [s]ome):
  2w:s/\<C-R>\<C-A>/changed/\<CR>

Expect (Changed):
  This is changed

Given (Some text):
  This is some text

Do (s/<cword>/changed/ at is[ ]some):
  2wh:s/\<C-R>\<C-W>/changed/\<CR>

Expect (Changed text):
  This is changed text

Do (s/<cword>/changed/ at some[ ]text):
  3wh:s/\<C-R>\<C-W>/changed/\<CR>

Expect (Some changed):
  This is some changed

Do (Save error messages):
  :redir @">\<CR>
  :messages\<CR>
  :redir END\<CR>

Before (Count number of existing errors):
  let existing = count(split(@", '\n'), 'E348: No string under cursor')

Given (Empty line):
  

Do (Set second line to <cword> then save error messages):
  :call setline(2, '\<C-R>\<C-W>')\<CR>
  :redir @">\<CR>
  :messages\<CR>
  :redir END\<CR>

Then (Assert that one more error message is present):
  let present = count(split(@", '\n'), 'E348: No string under cursor')
  AssertEqual existing + 1, present

Expect (Empty second line):
  
  

Given (Single line of whitespace):
    

Do (Set second line to <cword> then save error messages):
  :call setline(2, '\<C-R>\<C-W>')\<CR>
  :redir @">\<CR>
  :messages\<CR>
  :redir END\<CR>

Then (Assert that one more error message is present):
  let present = count(split(@", '\n'), 'E348: No string under cursor')
  AssertEqual existing + 1, present

Expect (Empty second line):
    
  

Given (Line of whitespace before regular text):
    
  This is some text

Do (Set third line to <cword> then save error messages):
  :call setline(3, '\<C-R>\<C-W>')\<CR>
  :redir @">\<CR>
  :messages\<CR>
  :redir END\<CR>

Then (Assert that one more error message is present):
  let present = count(split(@", '\n'), 'E348: No string under cursor')
  AssertEqual existing + 1, present

Expect (Empty third line):
    
  This is some text
  

Given (Line of whitespace after regular text):
  This is some text
    

Do (Set third line to <cword> then save error messages):
  j
  :call setline(3, '\<C-R>\<C-W>')\<CR>
  :redir @">\<CR>
  :messages\<CR>
  :redir END\<CR>

Then (Assert that one more error message is present):
  let present = count(split(@", '\n'), 'E348: No string under cursor')
  AssertEqual existing + 1, present

Expect (Empty third line):
  This is some text
    
  
